name: Deploy

on:
  push:
    branches: ["master"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  publish-pages:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3
      - name: Setup Pages
        uses: actions/configure-pages@v3
      - name: Install
        run: npm ci --no-optional
      - name: Build storybook
        run: npm run build-storybook
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'docs'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
  publish-npm:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3
      - name: Use .npmrc
        uses: bduff9/use-npmrc@v1.2
        with:
          dot-npmrc: |
            unsafe-perm=true
            //registry.npmjs.org/:_authToken=${{ secrets.NPM_PUBLISH_TOKEN }}

      - name: Check version
        id: version
        run: |
          PACKAGE_VERSION="$(node -p -e "require('./package.json').version")"
          PACKAGE_NAME="$(node -p -e "require('./package.json').name")"

          IS_NEW_VERSION=$((npm view "$PACKAGE_NAME@$PACKAGE_VERSION" versions 2>/dev/null | grep -q "$PACKAGE_VERSION") && echo false || echo true)

          echo "is_new=$IS_NEW_VERSION" >> "$GITHUB_OUTPUT"

          if [[ $IS_NEW_VERSION == "true" ]]; then
            echo "$PACKAGE_NAME@$PACKAGE_VERSION is a new version"
          else
            echo "$PACKAGE_NAME@$PACKAGE_VERSION is not a new version"
          fi
      - name: Install
        run: npm ci --no-optional
      - name: Build
        run: npm run build
      - name: Publish
        run: npm publish --access public
        if: steps.version.outputs.is_new == 'true'
